import Personas.*
import Marcas.*
import Carpas.*
describe "Requerimientos Primera Parte"{
	// Se instancian las diferentes marcas de cervezas
	const corona = new Rubia(graduacionA = 10, contenidoLupulo = 2, paisFabricacion = "Belga")
	const hofbrau = new Roja(contenidoLupulo = 2, paisFabricacion = "Checa")
	const guiness = new Negra(contenidoLupulo = 5,paisFabricacion ="Alemana")
	// Se instancia la persona belga,aleman y checo 80kg musicatradicional = false , nivel de aguante 50
	const personaBelga = new Belga()
	const personaCheco = new Checo()
	const personaAleman= new Aleman()

	
	// Se instancia una jarra
	const jarraUno = new Jarra(capacidad = 0.5,marca = hofbrau)
	const jarraDos = new Jarra(capacidad = 1,marca = corona)
	test "Contenido de alcohol de una jarra de 0.5 de Cerveza hofbrau "{	
		// reglamentaria = 5  conteniedoLupulo = 2 capacidadDeLaJarra = 0.5
		//formula = 5.min(4) * 1.25 *
		// 			(4*1.25)*0.01*0.5 == 0
		//			5*0.01 * 0.5 = 0.025 litros
		assert.equals(0.025,jarraUno.contenidoDeAlcohol())
	}
	test "Cantidad de Alcohol ingerido por personaBelga"{
		personaBelga.comprarJarra(jarraUno)
		personaBelga.comprarJarra(jarraDos)
		// graduacion jarraDos = 0.1
		// resultado esperado = 0.1.025 = 0.125 litros
		assert.equals(0.125,personaBelga.alcoholEnSangre())
		
	}
	test "No Esta ebria presonaBelga"{
		// formula la suma del alcohol de las jarras compradas * el peso > nivel de aguante
		// 0.125 * 80  = (10> 50) 
		// esperado false
		personaBelga.comprarJarra(jarraUno)
		assert.notThat(personaBelga.estaEbria())
	}
	test "personaBelga le gusta la guiness"{
		assert.that(personaBelga.leGusta(guiness))
	}
	test "personaBelga no le gusta la corona"{
		assert.notThat(personaBelga.leGusta(corona))
	}
	test "personaCheco  le gusta la corona"{
		assert.that(personaCheco.leGusta(corona))
	}
	test "personaCheco no le gusta la guiness"{
		assert.notThat(personaCheco.leGusta(guiness))
	}
	test "personaAleman le gustan todas"{
		assert.that(personaAleman.leGusta(guiness))
		assert.that(personaAleman.leGusta(corona))
		assert.that(personaAleman.leGusta(hofbrau))
	}
}
describe "Requerimientos Primera Segunda"{
	// Se instancian las diferentes marcas de cervezas
	const corona = new Rubia(graduacionA = 10, contenidoLupulo = 2, paisFabricacion = "Belga")
	const hofbrau = new Roja(contenidoLupulo = 5, paisFabricacion = "Checa")
	const guiness = new Negra(contenidoLupulo = 4,paisFabricacion ="Alemana" )
	// Se instancia la persona belga,aleman y checo 80kg  , nivel de aguante 10
	const personaBelga = new Belga(nivelDeAguante = 10)
	const personaCheco = new Checo(musicaTradicional = true,nivelDeAguante = 10) // le gusta la musica
	const personaAleman= new Aleman(nivelDeAguante = 10)
	// JARRAS
	const jarraHofbrau = new Jarra(capacidad = 1,marca = hofbrau)
	const jarraCorona = new Jarra(capacidad = 1,marca = corona)
	const jarraGuiness = new Jarra(capacidad = 1, marca= guiness)
	

	// CARPA
	const carpaCorona = new Carpa(limite = 2 ,marca = corona ,hayMusica = true,personasInterior=[personaAleman,personaBelga])// tiene musica
	const carpaHofbrau = new Carpa(marca = hofbrau)
	const carpaGuiness = new Carpa(marca = guiness) 
	
	test "Le gusta a personaBelga la carpaHofbrau"{
		assert.that(personaBelga.leGustaLaCarpa(carpaHofbrau))
	}
	test "No le gusta a personaBelga la carpaGuiness"{
		assert.notThat(personaBelga.leGustaLaCarpa(carpaGuiness))
	}
	test "le gusta a personaCheco la carpaCorona con musica"{
		assert.that(personaCheco.leGustaLaCarpa(carpaCorona))
	}
	test "carpaCorona supera limite de personas limite (2)"{
		assert.notThat(carpaCorona.puedeIngresar(personaCheco))
	}
	test "Puede ingresar personaBelga a carpaHofbrau"{
		assert.that(carpaHofbrau.puedeIngresar(personaBelga))
	}
	test "No puede ingresar personaAleman a carpaHofbrau por estar Ebrio"{
		50.times({j => personaAleman.comprarJarra(jarraGuiness)}) 
		assert.notThat(carpaHofbrau.puedeIngresar(personaAleman))
	}
	test "personaAleman es patriota"{
		assert.that(personaAleman.esPatriota())
	}
	test "personaCheco es empedernido"{
		50.times({j => personaCheco.comprarJarra(jarraGuiness)})
		assert.that(personaCheco.esEmpedernido())
	}
}
describe "Requerimientos avanzados"{
	// adjunto algunos test
	const corona = new Rubia(graduacionA = 10, contenidoLupulo = 2, paisFabricacion = "Belga")
	const jarraUno = new Jarra(capacidad = 0.5,marca = corona)
	const jarraDos = new Jarra(capacidad = 1,marca = corona)
	const jarraTres = new Jarra(capacidad = 2,marca = corona)
	const personaBelga = new Belga(jarrasCompradas = [jarraUno,jarraDos,jarraTres])
	test "personaBelga entra en vicio"{
		assert.that(personaBelga.estaEntrandoEnVicio())
	}
	
}


